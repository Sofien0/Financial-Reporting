import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path

OUTPUT_DIR = Path('data/outputs/visualizations')
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

def load_cleaned_benchmark(path='data/processed/benchmark_long_table_cleaned.csv') -> pd.DataFrame:
    df = pd.read_csv(path)
    # Fix any company names if needed, strip spaces, etc.
    df['company'] = df['company'].str.strip()
    return df

def top_emitters_per_sector(df: pd.DataFrame):
    # Filter KPI names for GHG Emissions (scope 1-3 emissions were removed in cleaning, so let's use "Total GHG Emissions from Power Generation" etc)
    # You can adjust this KPI list if you have other relevant KPIs for emissions
    emissions_kpis = [
        'Total GHG Emissions from Power Generation',
        'Year-over-Year Change in GHG Emissions',
        'GHG Emissions Intensity per kWh Delivered'
    ]
    df_emit = df[df['kpi_name'].isin(emissions_kpis)]

    # Aggregate total emissions value by company and sector
    agg = df_emit.groupby(['sector', 'company'])['value'].sum().reset_index()

    fig = px.bar(
        agg, 
        x='company', 
        y='value', 
        color='sector',
        title='Top Emitters per Sector (Total Emissions KPI Sum)',
        labels={'value': 'Total Emissions Value', 'company': 'Company'},
        height=600
    )
    fig.update_layout(xaxis_tickangle=-45)
    fig.write_html(OUTPUT_DIR / 'top_emitters_per_sector.html')
    print("[✔] Top Emitters per Sector visualization saved.")

def hazardous_waste_by_subsector(df: pd.DataFrame):
    waste_kpis = ['Amount of hazardous waste generated', 'Hazardous Waste Generation Rate']

    df_waste = df[df['kpi_name'].isin(waste_kpis)]

    # Aggregate sum of hazardous waste by subsector
    agg = df_waste.groupby('subsector')['value'].sum().reset_index().sort_values('value')

    fig = px.bar(
        agg, 
        y='subsector', 
        x='value', 
        orientation='h',
        title='Hazardous Waste Generated by Subsector',
        labels={'value': 'Total Hazardous Waste', 'subsector': 'Subsector'},
        height=600
    )
    fig.write_html(OUTPUT_DIR / 'hazardous_waste_by_subsector.html')
    print("[✔] Hazardous Waste by Subsector visualization saved.")

def kpi_coverage_heatmap(df: pd.DataFrame):
    # Build a binary matrix of company × kpi presence (1 if any record exists)
    presence = df.groupby(['company', 'kpi_name']).size().unstack(fill_value=0)
    presence = presence.applymap(lambda x: 1 if x > 0 else 0)

    # Limit heatmap size for performance (top 50 companies and top 30 KPIs)
    top_companies = presence.sum(axis=1).sort_values(ascending=False).head(50).index
    top_kpis = presence.sum(axis=0).sort_values(ascending=False).head(30).index
    presence_sub = presence.loc[top_companies, top_kpis]

    fig = px.imshow(
        presence_sub,
        labels=dict(x="KPI", y="Company", color="Presence"),
        x=presence_sub.columns,
        y=presence_sub.index,
        color_continuous_scale='Blues',
        title='KPI Coverage Heatmap (Top Companies and KPIs)'
    )
    fig.update_xaxes(side="top")
    fig.write_html(OUTPUT_DIR / 'kpi_coverage_heatmap.html')
    print("[✔] KPI Coverage Heatmap visualization saved.")

def trend_over_time(df: pd.DataFrame):
    # Pick a KPI with multiple years for some companies, for example 'Year-over-Year Change in GHG Emissions'
    kpi_name = 'Year-over-Year Change in GHG Emissions'
    df_kpi = df[df['kpi_name'] == kpi_name]

    # Filter companies with data in multiple years
    counts = df_kpi.groupby('company')['year'].nunique()
    multi_year_companies = counts[counts > 1].index

    df_multi = df_kpi[df_kpi['company'].isin(multi_year_companies)]

    fig = px.line(
        df_multi,
        x='year',
        y='value',
        color='company',
        markers=True,
        title=f'Trend Over Time: {kpi_name}',
        labels={'value': 'Value', 'year': 'Year', 'company': 'Company'}
    )
    fig.write_html(OUTPUT_DIR / 'trend_over_time.html')
    print("[✔] Trend Over Time visualization saved.")

def run_all_visualizations():
    df = load_cleaned_benchmark()
    top_emitters_per_sector(df)
    hazardous_waste_by_subsector(df)
    kpi_coverage_heatmap(df)
    trend_over_time(df)
    print(f"[✔] All visualizations saved to {OUTPUT_DIR}")

if __name__ == "__main__":
    run_all_visualizations()
